package main

import "fmt"

// В функцию сортировки передается массив, его левая и правая граница
func quickSort(mas []int, left, right int) []int {
	// Копируем значения границ в другие переменные, так как их старые значения нам понадобятся позже
	low, high := left, right
	// Определяем опорный элемент
	sup := mas[(low+high)/2]

	// Пока левый указатель не пересек правую
	for low <= high {
		// Находим слева элемент больший опорного
		for mas[low] < sup {
			low++
		}
		// Находим справа элемент меньший опорного
		for mas[high] > sup {
			high--
		}
		// Если левый указатель меньше или равен правому
		if low <= high {
			// Меняем элементы местами
			mas[low], mas[high] = mas[high], mas[low]
			// Продолжаем сдвигать указатели
			low++
			high--
		}
	}
	// Если правый указатель больше левой границы
	if high > left {
		// Значит осталась неотсортированная часть слева
		quickSort(mas, left, high)
	}
	// Если левый указатель меньше правой границы
	if low < right {
		// Значит осталась неотсортированная часть справа
		quickSort(mas, low, right)
	}
	// Возвращаем отсортированный массив (или частично отсортированный)
	return mas
}

func main() {
	mas := []int{8, 9, 5, 7, 2, 13, 24, 1, 6, 13}

	mas = quickSort(mas, 0, len(mas)-1)

	fmt.Println(mas)
}

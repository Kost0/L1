package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Функция запускающая воркеров
func startWorkers(workers int) {
	// Канал для записи int
	ch := make(chan int)

	// Горутина для записи данных в канал
	go func() {
		// Бесконечный цикл для постоянной записи
		for {
			// Записываем случайное число в канал
			ch <- rand.Intn(1000)
			// Для удобства чтения результата делаем небольшую задержку
			time.Sleep(500 * time.Millisecond)
		}
	}()

	// WaitGroup для работы с горутинами
	wg := sync.WaitGroup{}

	// Запускаем нужное количество воркеров
	for i := 0; i < workers; i++ {
		// Увеличиваем счетчик в WaitGroup
		wg.Add(1)
		// Запускаем горутину-воркер
		go func() {
			// По окончанию выполнения функции в горутине уменьшаем счетчик в WaitGroup
			defer wg.Done()
			// Читаем данные из канала
			for n := range ch {
				// Выводим результат и номер воркера, чтобы показать что данные обрабатывают разные горутины
				fmt.Printf("Воркер номер %d, прочитал: %d\n", i, n)
			}
		}()
	}

	// Ожидаем окончания всех горутин
	wg.Wait()
}

func main() {
	// Определяем количество воркеров
	workers := 10
	// Запускаем воркеры
	startWorkers(workers)
}

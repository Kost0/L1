package main

import (
	"fmt"
	"sync"
)

func main() {
	// Массив из которого будут читаться данные
	nums := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

	// Канал для чтения данных из массива и передачи их во второй канал
	chIn := make(chan int)

	// WaitGroup для работы с горутинами
	wg := &sync.WaitGroup{}

	// Увеличиваем счетчик в WaitGroup
	wg.Add(1)
	// Запускаем горутину для чтения данных их массива
	go func() {
		// По окончанию выполнения функции в горутине уменьшаем счетчик в WaitGroup
		defer wg.Done()
		// Проходимся по всем элементам массива
		for _, n := range nums {
			// Записываем их в канал
			chIn <- n
		}
		// Закрываем канал после прочтения всех данных
		close(chIn)
	}()

	// Канал для вывода умноженных на 2 чисел
	chOut := make(chan int)

	// Увеличиваем счетчик в WaitGroup
	wg.Add(1)
	go func() {
		// По окончанию выполнения функции в горутине уменьшаем счетчик в WaitGroup
		defer wg.Done()
		// Читаем все данные из первого канала
		for n := range chIn {
			// Умножаем их на 2 и отправляем во второй канал
			chOut <- n * 2
		}
		// Закрываем канал после получения всех данных
		close(chOut)
	}()

	// Увеличиваем счетчик в WaitGroup
	wg.Add(1)
	go func() {
		// По окончанию выполнения функции в горутине уменьшаем счетчик в WaitGroup
		defer wg.Done()
		// Читаем все данные из второго канала
		// Из-за закрытия канала, чтение завершится корректно
		for n := range chOut {
			// Выводим их
			fmt.Println(n)
		}
	}()

	// Ожидаем окончания всех горутин
	wg.Wait()
}

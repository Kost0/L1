package main

import "fmt"

// Функция для смены бита, принимает изначальное число, индекс бита, значение, на которое меняется бит
func setBit(num int64, ind uint, bit int8) int64 {
	// 1 << ind создает маску, в которой все значения 0, кроме ind
	cur := int8(num & (1 << ind))
	// Если при сопоставлении числа и маски получается отличное от 0 значение
	// Значит на этом индексе располагается 0
	if cur != 0 {
		cur = 1
	}
	// Если бит совпал с тем, на который меняем, то возвращаем исходное число
	if cur == bit {
		return num
	}
	if bit == 0 {
		// Если нужно получить 0, создаем маску с одной	1, AND NOT отрицает маску
		// Получается маска с одним 0, он и обнуляет значение нужного бита
		return num &^ (1 << ind)
	} else {
		// Если нужно получить 1, создаем маску с одной	1,
		// OR сделает нужное значение равным 1
		return num | (1 << ind)
	}
}

func main() {
	num := int64(5) // 1 0 1
	ind := uint(0)
	bit := int8(0)
	fmt.Println(setBit(num, ind, bit)) // 1 0 0 (4)

	num = int64(22) // 1 0 1 1 0
	ind = uint(3)
	bit = int8(1)
	fmt.Println(setBit(num, ind, bit)) // 1 1 1 1 0 (30)

	num = int64(9) // 1 0 0 1
	ind = uint(0)
	bit = int8(1)
	fmt.Println(setBit(num, ind, bit)) // 1 0 0 1 (9)
}
